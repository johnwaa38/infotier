import { Controller, Get, Post, Param, UseInterceptors, UploadedFiles, Body } from '@nestjs/common'; import { AnyFilesInterceptor } from '@nestjs/platform-express'; import { VerificationsService } from './verifications.service'; import { ApiBearerAuth, ApiConsumes, ApiTags } from '@nestjs/swagger'; @ApiTags('verifications') @ApiBearerAuth() @Controller('v1/verifications') export class VerificationsController { constructor(private svc: VerificationsService){} @Get() list(){ return this.svc.list() } @Get(':id') get(@Param('id') id:string){ return this.svc.get(id) } @Post(':id/decision') decide(@Param('id') id:string, @Body() body:any){ const { action='approved', actor='admin' } = body||{}; return this.svc.manualDecision(id, action, actor) } @Get(':id/logs') logs(@Param('id') id:string){ return this.svc.logs(id) } @Post() @ApiConsumes('multipart/form-data') @UseInterceptors(AnyFilesInterceptor()) async create(@UploadedFiles() files: Array<Express.Multer.File>, @Body() body:any){ const { customerId='cust_demo', userReference='user_123', idType='driver_license' } = body; const mapped=(files||[]).map(f=>({ field:f.fieldname||'file', buffer:f.buffer, mime:f.mimetype })); return this.svc.createVerification({ customerId, userReference, idType, files: mapped }) } }
